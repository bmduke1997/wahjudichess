package chess.gui;

import javafx.scene.shape.MeshView;
import javafx.scene.shape.TriangleMesh;

public class KnightMeshView extends MeshView {
    private static TriangleMesh mesh = null;

    public KnightMeshView() {
        super();

        /* If the mesh has not already been initialized,
         * initialize it.  Else, use the one we've already made. */
        if (mesh == null) {
            mesh = new TriangleMesh();

            /* Add the dummy texture coordinates. */
            mesh.getTexCoords().addAll(0, 0);

            /* Add the points to the mesh. */
            mesh.getTexCoords().addAll(0, 0);
float points[] = {(float)-0.0000, (float)2.4788, (float)-9.8695, (float)-0.1467, (float)0.9888, (float)-7.4961, (float)-0.3541, (float)1.1685, (float)-7.3647, (float)-0.3541, (float)1.4225, (float)-7.1787, (float)-0.1467, (float)1.6022, (float)-7.0473, (float)0.1467, (float)1.6022, (float)-7.0473, (float)0.3541, (float)1.4225, (float)-7.1787, (float)0.3541, (float)1.1685, (float)-7.3647, (float)0.1467, (float)0.9888, (float)-7.4961, (float)-0.0000, (float)-3.2139, (float)1.0320, (float)-0.0000, (float)-3.2139, (float)-0.2536, (float)-0.6270, (float)-3.1521, (float)1.0320, (float)-0.6270, (float)-3.1521, (float)-0.2536, (float)-1.2299, (float)-2.9692, (float)1.0320, (float)-1.2299, (float)-2.9692, (float)-0.2536, (float)-1.7855, (float)-2.6722, (float)1.0320, (float)-1.7855, (float)-2.6722, (float)-0.2536, (float)-2.2726, (float)-2.2726, (float)1.0320, (float)-2.2726, (float)-2.2726, (float)-0.2536, (float)-2.6722, (float)-1.7855, (float)1.0320, (float)-2.6722, (float)-1.7855, (float)-0.2536, (float)-2.9692, (float)-1.2299, (float)1.0320, (float)-2.9692, (float)-1.2299, (float)-0.2536, (float)-3.1521, (float)-0.6270, (float)1.0320, (float)-3.1521, (float)-0.6270, (float)-0.2536, (float)-3.2139, (float)-0.0000, (float)1.0320, (float)-3.2139, (float)-0.0000, (float)-0.2536, (float)-3.1521, (float)0.6270, (float)1.0320, (float)-3.1521, (float)0.6270, (float)-0.2536, (float)-2.9692, (float)1.2299, (float)1.0320, (float)-2.9692, (float)1.2299, (float)-0.2536, (float)-2.6722, (float)1.7855, (float)1.0320, (float)-2.6722, (float)1.7855, (float)-0.2536, (float)-2.2726, (float)2.2726, (float)1.0320, (float)-2.2726, (float)2.2726, (float)-0.2536, (float)-1.7855, (float)2.6722, (float)1.0320, (float)-1.7855, (float)2.6722, (float)-0.2536, (float)-1.2299, (float)2.9692, (float)1.0320, (float)-1.2299, (float)2.9692, (float)-0.2536, (float)-0.6270, (float)3.1521, (float)1.0320, (float)-0.6270, (float)3.1521, (float)-0.2536, (float)0.0000, (float)3.2139, (float)1.0320, (float)0.0000, (float)3.2139, (float)-0.2536, (float)0.6270, (float)3.1521, (float)1.0320, (float)0.6270, (float)3.1521, (float)-0.2536, (float)1.2299, (float)2.9692, (float)1.0320, (float)1.2299, (float)2.9692, (float)-0.2536, (float)1.7855, (float)2.6722, (float)1.0320, (float)1.7855, (float)2.6722, (float)-0.2536, (float)2.2726, (float)2.2726, (float)1.0320, (float)2.2726, (float)2.2726, (float)-0.2536, (float)2.6722, (float)1.7855, (float)1.0320, (float)2.6722, (float)1.7855, (float)-0.2536, (float)2.9692, (float)1.2299, (float)1.0320, (float)2.9692, (float)1.2299, (float)-0.2536, (float)3.1521, (float)0.6270, (float)1.0320, (float)3.1521, (float)0.6270, (float)-0.2536, (float)3.2139, (float)-0.0000, (float)1.0320, (float)3.2139, (float)-0.0000, (float)-0.2536, (float)3.1521, (float)-0.6270, (float)1.0320, (float)3.1521, (float)-0.6270, (float)-0.2536, (float)2.9692, (float)-1.2299, (float)1.0320, (float)2.9692, (float)-1.2299, (float)-0.2536, (float)2.6722, (float)-1.7855, (float)1.0320, (float)2.6722, (float)-1.7855, (float)-0.2536, (float)2.2726, (float)-2.2726, (float)1.0320, (float)2.2726, (float)-2.2726, (float)-0.2536, (float)1.7855, (float)-2.6722, (float)1.0320, (float)1.7855, (float)-2.6722, (float)-0.2536, (float)1.2299, (float)-2.9692, (float)1.0320, (float)1.2299, (float)-2.9692, (float)-0.2536, (float)0.6270, (float)-3.1521, (float)1.0320, (float)0.6270, (float)-3.1521, (float)-0.2536, (float)1.5914, (float)1.5914, (float)-0.1287, (float)1.0111, (float)1.0111, (float)-7.6983, (float)1.5914, (float)-1.5914, (float)-0.1287, (float)1.0111, (float)-1.0111, (float)-7.6983, (float)-1.5914, (float)1.5914, (float)-0.1287, (float)-1.0111, (float)1.0111, (float)-7.6983, (float)-1.5914, (float)-1.5914, (float)-0.1287, (float)-1.0111, (float)-1.0111, (float)-7.6983, (float)1.2840, (float)1.2840, (float)-4.1385, (float)-1.2840, (float)1.2840, (float)-4.1385, (float)0.6011, (float)3.1308, (float)-5.4314, (float)-0.6011, (float)3.1308, (float)-5.4314, (float)0.7633, (float)3.2930, (float)-3.3152, (float)-0.7633, (float)3.2930, (float)-3.3152, (float)1.4106, (float)-1.4106, (float)-2.4867, (float)-1.4106, (float)-1.4106, (float)-2.4867, (float)0.4907, (float)-2.2632, (float)-6.4986, (float)-0.4907, (float)-2.2632, (float)-6.4986, (float)0.6846, (float)-2.4571, (float)-3.9695, (float)-0.6846, (float)-2.4571, (float)-3.9695};
            mesh.getPoints().addAll(points);

            /* Add the faces to the mesh. */
            int faces[] = {4, 0, 3, 0, 5, 0, 8, 0, 5, 0, 3, 0, 7, 0, 6, 0, 8, 0, 3, 0, 2, 0, 1, 0, 3, 0, 1, 0, 8, 0, 8, 0, 6, 0, 5, 0, 0, 0, 8, 0, 1, 0, 2, 0, 0, 0, 1, 0, 3, 0, 0, 0, 2, 0, 4, 0, 0, 0, 3, 0, 5, 0, 0, 0, 4, 0, 6, 0, 0, 0, 5, 0, 7, 0, 0, 0, 6, 0, 8, 0, 0, 0, 7, 0, 9, 0, 11, 0, 10, 0, 11, 0, 13, 0, 12, 0, 13, 0, 15, 0, 14, 0, 15, 0, 17, 0, 16, 0, 17, 0, 19, 0, 18, 0, 19, 0, 21, 0, 20, 0, 21, 0, 23, 0, 22, 0, 23, 0, 25, 0, 24, 0, 25, 0, 27, 0, 26, 0, 27, 0, 29, 0, 28, 0, 29, 0, 31, 0, 30, 0, 31, 0, 33, 0, 32, 0, 33, 0, 35, 0, 34, 0, 35, 0, 37, 0, 36, 0, 37, 0, 39, 0, 38, 0, 39, 0, 41, 0, 40, 0, 41, 0, 43, 0, 42, 0, 43, 0, 45, 0, 44, 0, 45, 0, 47, 0, 46, 0, 47, 0, 49, 0, 48, 0, 49, 0, 51, 0, 50, 0, 51, 0, 53, 0, 52, 0, 53, 0, 55, 0, 54, 0, 55, 0, 57, 0, 56, 0, 57, 0, 59, 0, 58, 0, 59, 0, 61, 0, 60, 0, 61, 0, 63, 0, 62, 0, 63, 0, 65, 0, 64, 0, 65, 0, 67, 0, 66, 0, 67, 0, 69, 0, 68, 0, 62, 0, 30, 0, 46, 0, 69, 0, 71, 0, 70, 0, 71, 0, 9, 0, 72, 0, 71, 0, 55, 0, 39, 0, 74, 0, 81, 0, 75, 0, 75, 0, 79, 0, 87, 0, 80, 0, 88, 0, 77, 0, 73, 0, 81, 0, 77, 0, 75, 0, 73, 0, 79, 0, 80, 0, 78, 0, 76, 0, 11, 0, 12, 0, 10, 0, 13, 0, 14, 0, 12, 0, 15, 0, 16, 0, 14, 0, 17, 0, 18, 0, 16, 0, 19, 0, 20, 0, 18, 0, 21, 0, 22, 0, 20, 0, 23, 0, 24, 0, 22, 0, 25, 0, 26, 0, 24, 0, 27, 0, 28, 0, 26, 0, 29, 0, 30, 0, 28, 0, 31, 0, 32, 0, 30, 0, 33, 0, 34, 0, 32, 0, 35, 0, 36, 0, 34, 0, 37, 0, 38, 0, 36, 0, 39, 0, 40, 0, 38, 0, 41, 0, 42, 0, 40, 0, 43, 0, 44, 0, 42, 0, 45, 0, 46, 0, 44, 0, 47, 0, 48, 0, 46, 0, 49, 0, 50, 0, 48, 0, 51, 0, 52, 0, 50, 0, 53, 0, 54, 0, 52, 0, 55, 0, 56, 0, 54, 0, 57, 0, 58, 0, 56, 0, 59, 0, 60, 0, 58, 0, 61, 0, 62, 0, 60, 0, 63, 0, 64, 0, 62, 0, 65, 0, 66, 0, 64, 0, 67, 0, 68, 0, 66, 0, 69, 0, 70, 0, 68, 0, 10, 0, 12, 0, 14, 0, 70, 0, 72, 0, 10, 0, 62, 0, 68, 0, 70, 0, 62, 0, 64, 0, 66, 0, 58, 0, 60, 0, 62, 0, 54, 0, 56, 0, 58, 0, 46, 0, 52, 0, 54, 0, 46, 0, 48, 0, 50, 0, 38, 0, 44, 0, 46, 0, 38, 0, 40, 0, 42, 0, 34, 0, 36, 0, 38, 0, 30, 0, 32, 0, 34, 0, 26, 0, 28, 0, 30, 0, 22, 0, 24, 0, 26, 0, 18, 0, 20, 0, 22, 0, 14, 0, 16, 0, 18, 0, 62, 0, 10, 0, 14, 0, 62, 0, 66, 0, 68, 0, 46, 0, 58, 0, 62, 0, 46, 0, 50, 0, 52, 0, 38, 0, 42, 0, 44, 0, 46, 0, 34, 0, 38, 0, 22, 0, 26, 0, 30, 0, 30, 0, 18, 0, 22, 0, 62, 0, 70, 0, 10, 0, 46, 0, 54, 0, 58, 0, 30, 0, 34, 0, 46, 0, 14, 0, 18, 0, 30, 0, 30, 0, 62, 0, 14, 0, 71, 0, 72, 0, 70, 0, 9, 0, 10, 0, 72, 0, 15, 0, 9, 0, 71, 0, 15, 0, 13, 0, 11, 0, 19, 0, 17, 0, 15, 0, 15, 0, 21, 0, 19, 0, 31, 0, 25, 0, 23, 0, 31, 0, 29, 0, 27, 0, 35, 0, 33, 0, 31, 0, 39, 0, 37, 0, 35, 0, 43, 0, 41, 0, 39, 0, 47, 0, 45, 0, 43, 0, 51, 0, 49, 0, 47, 0, 55, 0, 53, 0, 51, 0, 63, 0, 57, 0, 55, 0, 63, 0, 61, 0, 59, 0, 67, 0, 65, 0, 63, 0, 63, 0, 69, 0, 67, 0, 15, 0, 11, 0, 9, 0, 23, 0, 21, 0, 15, 0, 31, 0, 27, 0, 25, 0, 23, 0, 35, 0, 31, 0, 55, 0, 43, 0, 39, 0, 55, 0, 51, 0, 47, 0, 63, 0, 59, 0, 57, 0, 71, 0, 69, 0, 63, 0, 23, 0, 15, 0, 71, 0, 39, 0, 35, 0, 23, 0, 55, 0, 47, 0, 43, 0, 71, 0, 63, 0, 55, 0, 39, 0, 23, 0, 71, 0, 75, 0, 87, 0, 74, 0, 88, 0, 92, 0, 87, 0, 77, 0, 82, 0, 80, 0, 86, 0, 84, 0, 82, 0, 73, 0, 77, 0, 79, 0, 78, 0, 74, 0, 76, 0, 83, 0, 84, 0, 85, 0, 74, 0, 83, 0, 81, 0, 81, 0, 85, 0, 82, 0, 84, 0, 83, 0, 78, 0, 91, 0, 92, 0, 89, 0, 76, 0, 89, 0, 80, 0, 90, 0, 92, 0, 80, 0, 87, 0, 91, 0, 76, 0, 81, 0, 73, 0, 75, 0, 79, 0, 88, 0, 87, 0, 88, 0, 79, 0, 77, 0, 81, 0, 82, 0, 77, 0, 87, 0, 76, 0, 74, 0, 92, 0, 91, 0, 87, 0, 82, 0, 78, 0, 80, 0, 84, 0, 78, 0, 82, 0, 84, 0, 86, 0, 85, 0, 83, 0, 85, 0, 81, 0, 85, 0, 86, 0, 82, 0, 83, 0, 74, 0, 78, 0, 92, 0, 90, 0, 89, 0, 89, 0, 90, 0, 80, 0, 92, 0, 88, 0, 80, 0, 91, 0, 89, 0, 76, 0};
            mesh.getFaces().addAll(faces);
        }

        setMesh(mesh);
    }
}
